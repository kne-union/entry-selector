{"version":3,"file":"static/js/268.c751daed.chunk.js","mappings":"6LAGA,MCHiE,GAAgBA,cDG5D,CACjBC,KAAM,iBACNC,QAAS,8vEAoBTC,YAAa,2bACbC,YAAa,sBACbC,IAAK,wpGA4HLC,QAAS,CACLC,QAAQ,EACRC,UAAW,uBACXC,MAAO,uGAKPC,KAAM,CAAC,CACXC,MAAO,mDACPR,YAAa,mDACbS,KAAM,qnEAqENC,MAAO,CAAC,CACRZ,KAAM,iBACNG,YAAa,kCACbU,gBAAiB,wDACjBC,U,UACF,CACEd,KAAM,OACNG,YAAa,OACbW,U,gBC9OSC,EAAW,CAAC,KAAO,iBAAiB,QAAU,QAAQ,gBAAe,EAAK,aAAa,kBAAkB,QAAU,CAAC,CAAC,KAAO,iBAAiB,QAAU,kDAAkD,YAAc,2bAA6F,YAAc,wB","sources":["../../README.md","../node_modules/readme/modules.js"],"sourcesContent":["import * as component_1 from '@kne/current-lib_entry-selector';\nimport '@kne/current-lib_entry-selector/dist/index.css';\nimport * as component_3 from 'antd';\nconst readmeConfig = {\n    name: `entry-selector`,\n    summary: `<p>EntrySelector 是一个用于选择和管理条目列表的 React 组件。它提供了一个直观的界面，允许用户从可选列表中选择条目，并对已选条目进行管理，包括排序、搜索和删除等操作。</p>\n<h4>主要功能</h4>\n<ul>\n<li><strong>双列表展示</strong>：清晰地分离已选条目和可选条目</li>\n<li><strong>拖拽排序</strong>：支持对已选条目进行拖拽排序</li>\n<li><strong>搜索过滤</strong>：可以通过关键词搜索过滤条目</li>\n<li><strong>自定义渲染</strong>：支持自定义条目的渲染方式</li>\n<li><strong>国际化支持</strong>：内置中文和英文语言支持</li>\n<li><strong>添加新条目</strong>：支持添加不在预设列表中的新条目</li>\n</ul>\n<h4>使用场景</h4>\n<p>EntrySelector 适用于需要从预定义列表中选择多个条目并进行排序的场景，例如：</p>\n<ul>\n<li>选择并排序文章分类</li>\n<li>管理产品标签</li>\n<li>配置用户权限</li>\n<li>选择并排序展示项目</li>\n</ul>\n<h4>基本原理</h4>\n<p>组件内部维护已选条目列表和可选条目列表两个状态，通过用户交互在这两个列表之间移动条目。组件使用 react-sortablejs 实现拖拽排序功能，并支持通过搜索框过滤条目列表。</p>`,\n    description: `EntrySelector是一个用于选择和管理条目列表的 React 组件。它提供了一个直观的界面，允许用户从可选列表中选择条目，并对已选条目进行管理，包括排序、搜索和删除等操作。`,\n    packageName: `@kne/entry-selector`,\n    api: `<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>类型</th>\n<th>默认值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>value</td>\n<td>Array</td>\n<td>[]</td>\n<td>已选条目列表，每个条目应包含唯一id属性</td>\n</tr>\n<tr>\n<td>onChange</td>\n<td>Function</td>\n<td>-</td>\n<td>值变化时的回调函数，参数为新的value值</td>\n</tr>\n<tr>\n<td>onAdd</td>\n<td>Function</td>\n<td>-</td>\n<td>添加新条目的回调函数，参数为包含fetchApi、value和onChange的对象</td>\n</tr>\n<tr>\n<td>api</td>\n<td>Function</td>\n<td>-</td>\n<td>获取条目列表的API函数，用于加载可选条目数据</td>\n</tr>\n<tr>\n<td>options</td>\n<td>Array</td>\n<td>-</td>\n<td>条目操作选项列表，用于ButtonGroup组件</td>\n</tr>\n<tr>\n<td>renderSelectedItem</td>\n<td>Function</td>\n<td>-</td>\n<td>自定义渲染已选条目的函数，参数为条目数据和包含el、target、fetchApi、onChange的对象</td>\n</tr>\n<tr>\n<td>renderItem</td>\n<td>Function</td>\n<td>-</td>\n<td>自定义渲染可选条目的函数，参数为条目数据和包含fetchApi、el的对象</td>\n</tr>\n<tr>\n<td>renderOptions</td>\n<td>Function</td>\n<td>-</td>\n<td>自定义渲染操作选项的函数，参数为包含fetchApi、options的对象</td>\n</tr>\n<tr>\n<td>getSearchProps</td>\n<td>Function</td>\n<td>-</td>\n<td>获取搜索属性的函数，用于配置搜索功能</td>\n</tr>\n<tr>\n<td>searchPlaceholder</td>\n<td>String</td>\n<td>-</td>\n<td>搜索框占位文本，未设置时使用国际化文本</td>\n</tr>\n</tbody>\n</table>\n<h4>国际化支持</h4>\n<p>组件内置中文和英文两种语言，默认使用中文。可通过createWithIntlProvider配置国际化。</p>\n<table>\n<thead>\n<tr>\n<th>语言</th>\n<th>代码</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>中文</td>\n<td>zh-CN</td>\n</tr>\n<tr>\n<td>英文</td>\n<td>en-US</td>\n</tr>\n</tbody>\n</table>\n<h4>国际化文本键值</h4>\n<table>\n<thead>\n<tr>\n<th>键名</th>\n<th>中文</th>\n<th>英文</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>add</td>\n<td>添加</td>\n<td>Add</td>\n</tr>\n<tr>\n<td>selected</td>\n<td>已选</td>\n<td>Selected</td>\n</tr>\n<tr>\n<td>list</td>\n<td>列表</td>\n<td>List</td>\n</tr>\n<tr>\n<td>searchPlaceholder</td>\n<td>请输入关键字</td>\n<td>Please input keyword</td>\n</tr>\n</tbody>\n</table>`,\n    example: {\n        isFull: false,\n        className: `entry_selector_f371f`,\n        style: `.entry_selector_f371f .ant-card {\n  border-color: black;\n  text-align: center;\n  width: 200px;\n}`,\n        list: [{\n    title: `这里填写示例标题`,\n    description: `这里填写示例说明`,\n    code: `const { default: EntrySelector } = _EntrySelector;\nconst { Switch, Flex } = antd;\n\nconst BaseExample = () => {\n  return (\n    <div>\n      <EntrySelector\n        pagination={{ paramsType: 'params' }}\n        api={{\n          loader: data => {\n            console.log('fetch props:', data);\n            return {\n              totalCount: 3,\n              pageData: [\n                {\n                  id: 1,\n                  title: '你是什么性格的人？有哪些方面的不足？需要怎样改进？'\n                },\n                {\n                  id: 2,\n                  title: '你认为如何可以让一个员工有效高质的完成他的工作？'\n                },\n                {\n                  id: 3,\n                  title: '请分享一次你快速作出决定的经验，当时的情况怎样？你是怎么处理的？'\n                }\n              ]\n            };\n          }\n        }}\n        getSearchProps={({ searchText }) => {\n          return { title: searchText };\n        }}\n        renderSelectedItem={(item, { el, onChange }) => {\n          return (\n            <>\n              {el}\n              <Flex align=\"center\" gap={8}>\n                <span>开启追问</span>\n                <Switch\n                  size=\"small\"\n                  checked={item.hasProbe}\n                  onChange={checked => {\n                    onChange(Object.assign({}, item, { hasProbe: checked }));\n                  }}\n                />\n              </Flex>\n            </>\n          );\n        }}\n        onChange={value => {\n          console.log('>>>>>>>>', value);\n        }}\n        options={[\n          {\n            children: '操作1'\n          },\n          {\n            children: '操作2'\n          }\n        ]}\n      />\n    </div>\n  );\n};\n\nrender(<BaseExample />);\n\n`,\n    scope: [{\n    name: \"_EntrySelector\",\n    packageName: \"@kne/current-lib_entry-selector\",\n    importStatement: \"import * as _EntrySelector from \\\"@kne/entry-selector\\\"\",\n    component: component_1\n},{\n    name: \"antd\",\n    packageName: \"antd\",\n    component: component_3\n}]\n}]\n    }\n};\nexport default readmeConfig;\n","import EntrySelector from '@components/entry-selector/README.md';export default {EntrySelector};\nexport const manifest = {\"name\":\"entry-selector\",\"version\":\"0.1.2\",\"open-version\":true,\"public-url\":\"/entry-selector\",\"modules\":[{\"name\":\"entry-selector\",\"baseDir\":\"/home/runner/work/entry-selector/entry-selector\",\"description\":\"EntrySelector是一个用于选择和管理条目列表的 React 组件。它提供了一个直观的界面，允许用户从可选列表中选择条目，并对已选条目进行管理，包括排序、搜索和删除等操作。\",\"packageName\":\"@kne/entry-selector\"}]};"],"names":["EntrySelector","name","summary","description","packageName","api","example","isFull","className","style","list","title","code","scope","importStatement","component","manifest"],"sourceRoot":""}